name:                lightning-tip
version:             0.1.0.0
github:              "githubuser/lightning-tip"
license:             BSD3
author:              "Author name here"
maintainer:          "example@example.com"
copyright:           "2020 Author name here"

extra-source-files:
- README.md
- ChangeLog.md

# Metadata used when publishing your package
# synopsis:            Short description of your package
# category:            Web

# To avoid duplicated efforts in documentation and dealing with the
# complications of embedding Haddock markup inside cabal files, it is
# common to point users to the README.md file.
description:         Please see the README on GitHub at <https://github.com/githubuser/lightning-tip#readme>

dependencies:
- base >=4.9.1.0 && <5
- yesod >=1.6 && <1.7
- yesod-core >=1.6 && <1.7
- yesod-auth >=1.6 && <1.7
- yesod-static >=1.6 && <1.7
- yesod-form >=1.6 && <1.7
- classy-prelude >=1.5 && <1.6
- classy-prelude-conduit >=1.5 && <1.6
- classy-prelude-yesod >=1.5 && <1.6
- bytestring >=0.10 && <0.11
- text >=0.11 && <2.0
- persistent >=2.9 && <2.11
- persistent-postgresql >=2.9 && <2.11
- persistent-template >=2.5 && <2.9
- template-haskell
- shakespeare >=2.0 && <2.1
- hjsmin >=0.1 && <0.3
- monad-control >=0.3 && <1.1
- wai-extra >=3.0 && <3.1
- yaml >=0.11 && <0.12
- http-client-tls >=0.3 && <0.4
- http-conduit >=2.3 && <2.4
- directory >=1.1 && <1.4
- warp >=3.0 && <3.4
- data-default
- aeson >=1.4 && <1.5
- conduit >=1.0 && <2.0
- monad-logger >=0.3 && <0.4
- fast-logger >=2.2 && <3.1
- wai-logger >=2.2 && <2.4
- file-embed
- safe
- unordered-containers
- containers
- vector
- time
- case-insensitive
- wai
- foreign-store
- lnd-client
- persistent-migration
- resource-pool

# The library contains all of our application code. The executable
# defined below is just a thin wrapper.
library:
  source-dirs: src
  # TODO : remove dependencies if not needed
  dependencies:
  - hspec
  - hspec-wai
  when:
  - condition: (flag(dev)) || (flag(library-only))
    then:
      ghc-options:
      # For details on warnings: https://downloads.haskell.org/~ghc/master/users-guide/using-warnings.html
      # Enable all warnings with -Weverything, then disable the ones we don’t care about
      - -Weverything
      - -Werror
      - -Wno-missing-exported-signatures # missing-exported-signatures turns off the more strict -Wmissing-signatures. See https://ghc.haskell.org/trac/ghc/ticket/14794#ticket
      - -Wno-missing-import-lists # Requires explicit imports of _every_ function (e.g. ‘$’); too strict
      - -Wno-missed-specialisations # When GHC can’t specialize a polymorphic function. No big deal and requires fixing underlying libraries to solve.
      - -Wno-all-missed-specialisations # See missed-specialisations
      - -Wno-unsafe # Don’t use Safe Haskell warnings
      - -Wno-safe # Don’t use Safe Haskell warnings
      - -Wno-missing-local-signatures # Warning for polymorphic local bindings; nothing wrong with those.
      - -Wno-monomorphism-restriction # Don’t warn if the monomorphism restriction is used
      - -Wno-implicit-prelude
      - -O0
      cpp-options: -DDEVELOPMENT
    else:
      ghc-options:
      # For details on warnings: https://downloads.haskell.org/~ghc/master/users-guide/using-warnings.html
      # Enable all warnings with -Weverything, then disable the ones we don’t care about
      - -Weverything
      - -Werror
      - -Wno-missing-exported-signatures # missing-exported-signatures turns off the more strict -Wmissing-signatures. See https://ghc.haskell.org/trac/ghc/ticket/14794#ticket
      - -Wno-missing-import-lists # Requires explicit imports of _every_ function (e.g. ‘$’); too strict
      - -Wno-missed-specialisations # When GHC can’t specialize a polymorphic function. No big deal and requires fixing underlying libraries to solve.
      - -Wno-all-missed-specialisations # See missed-specialisations
      - -Wno-unsafe # Don’t use Safe Haskell warnings
      - -Wno-safe # Don’t use Safe Haskell warnings
      - -Wno-missing-local-signatures # Warning for polymorphic local bindings; nothing wrong with those.
      - -Wno-monomorphism-restriction # Don’t warn if the monomorphism restriction is used
      - -Wno-implicit-prelude
      - -O2

# Runnable executable for our application
executables:
  lightning-tip:
    main: main.hs
    source-dirs: app
    ghc-options:
    # For details on warnings: https://downloads.haskell.org/~ghc/master/users-guide/using-warnings.html
    # Enable all warnings with -Weverything, then disable the ones we don’t care about
    - -Weverything
    - -Werror
    - -Wno-missing-exported-signatures # missing-exported-signatures turns off the more strict -Wmissing-signatures. See https://ghc.haskell.org/trac/ghc/ticket/14794#ticket
    - -Wno-missing-import-lists # Requires explicit imports of _every_ function (e.g. ‘$’); too strict
    - -Wno-missed-specialisations # When GHC can’t specialize a polymorphic function. No big deal and requires fixing underlying libraries to solve.
    - -Wno-all-missed-specialisations # See missed-specialisations
    - -Wno-unsafe # Don’t use Safe Haskell warnings
    - -Wno-safe # Don’t use Safe Haskell warnings
    - -Wno-missing-local-signatures # Warning for polymorphic local bindings; nothing wrong with those.
    - -Wno-monomorphism-restriction # Don’t warn if the monomorphism restriction is used
    - -Wno-implicit-prelude
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - lightning-tip
    when:
    - condition: flag(library-only)
      buildable: false

# Test suite
tests:
  lightning-tip-test:
    main: Spec.hs
    source-dirs: test
    ghc-options:
    # For details on warnings: https://downloads.haskell.org/~ghc/master/users-guide/using-warnings.html
    # Enable all warnings with -Weverything, then disable the ones we don’t care about
    - -Weverything
    - -Werror
    - -Wno-missing-exported-signatures # missing-exported-signatures turns off the more strict -Wmissing-signatures. See https://ghc.haskell.org/trac/ghc/ticket/14794#ticket
    - -Wno-missing-import-lists # Requires explicit imports of _every_ function (e.g. ‘$’); too strict
    - -Wno-missed-specialisations # When GHC can’t specialize a polymorphic function. No big deal and requires fixing underlying libraries to solve.
    - -Wno-all-missed-specialisations # See missed-specialisations
    - -Wno-unsafe # Don’t use Safe Haskell warnings
    - -Wno-safe # Don’t use Safe Haskell warnings
    - -Wno-missing-local-signatures # Warning for polymorphic local bindings; nothing wrong with those.
    - -Wno-monomorphism-restriction # Don’t warn if the monomorphism restriction is used
    - -Wno-implicit-prelude
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - lightning-tip
    - hspec >=2.0.0
    - hspec-wai
    - yesod-test

# Define flags used by "yesod devel" to make compilation faster
flags:
  library-only:
    description: Build for use with "yesod devel"
    manual: false
    default: false
  dev:
    description: Turn on development settings, like auto-reload templates.
    manual: false
    default: false
